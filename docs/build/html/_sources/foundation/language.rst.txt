.. title:: Yet another Sudoku | Foundation | Language
.. role:: raw-html(raw)
   :format: html

********
Language
********

Agreement on an common language, that is comprehensive, and comprehensible to describe
and communicate Sudoku puzzles, concepts, patterns and resolutions,
appears to be lacking in the literature surveyed.  Without it, a `Confusion of Tongues
<https://en.wikipedia.org/wiki/Tower_of_Babel#Confusion_of_tongues>`_ as in the building of the Tower
of Babel prevails.  This is my attempt to draw from what I consider best practices in the literature
and put forward a precise, consistent and unambiguous language for Sudoku.  The notation is loosely
based on and develops from `Eureka <http://sudopedia.enjoysudoku.com/Eureka.html>`_

Part of this effort is to organise the theory into a logical structure and show the relationships
between the components.  A fall out of this is the definition of some new concepts and terms.  There
is also a renaming of some existing terms, such that they are:

*  less overloaded,
*  more consistent,
*  more self descriptive, and
*  relate better within the context that they are described.

Ccells
======

A Ccell refers to any candidate in any cell as specified by its candidate value, row and column.  That is,
a Ccell is the unique reference to a specific candidate in a cell.

A Ccell is defined as a three dimensional tuple of value, row and column, each dimension can range
between 1 and 9.  In Sudoku there are 729 unique (9 value x 9 row x 9 column) possible Ccells.  A
solved Sudoku puzzle comprises 81 unique Ccells of the 729 unique possibilities.  That is each cell
in the 9 row by 9 column has only one value, all values in all cells obeying :ref:`Sudoku Rules <sudoku_rules>`.

The term Ccell is not to be confused with:

*  **Node**:  which is a further qualification of a ccell that exists in a larger relationship such
   as a net or chain.  For example:  Ccells linked together in a chain form the Nodes between the
   links of the chain.
*  **Candidate**:  which is a a lesser reference to only the possible values in cells that obey Sudoku Rules.

Sudoku Syntax
=============

Location Specifiers
-------------------

.. list-table::
   :widths: 20 80
   :align: left
   :width: 98%

   *  -  ``r6c5``
      -  The cell in location row 6, column 5 in the 9x9 cell grid
   *  -  ``b4``
      -  The cells in box 4.
   *  -  ``b4p5``
      -  The cell in box 4, position 5, boxes and positions in boxes are counted left to right then
         top to bottom, translates to ``r5c2``
   *  -  ``r2``
      -  The cells in row 2
   *  -  ``c6``
      -  The cells in column 6
   *  -  ``5r2c6``
      -  The candidate 5 in cell ``r2c6``
   *  -  ``r34c245``
      -  The grid of 6 cells – ``r3c2``, ``r3c4``, ``r3c5``, ``r4c2``, ``r4c4`` and ``r4c5``
   *  -  ``r2r5,r3c456,r56c56``
      -  A collection of cells in a comma separated list
   *  -  ``r2c!378``
      -  All the cells in row 2 excluding ``r2c378``
   *  -  ``r!34c6``
      -  All the cells in column 6 excluding ``r35c6``

Ccell Specifiers
----------------

.. list-table::
   :widths: 20 80
   :align: left
   :width: 98%

   *  -  ``3r6c5``
      -  The Ccell of candidate 3 in row 6 column 5.
   *  -  ``3r6``
      -  All Ccells with candidate value 3 in row 6
   *  -  ``347b6p2``
      -  Three ccells with candidate values 3, 4, 7 in block 2 position 2 (same as ``r4c8``)

Operators
---------

.. list-table::
   :widths: 20 80
   :align: left
   :width: 98%

   *  -  ``:=``
      -  Placement of a value in a cell, eg. ``r4c5:=5``
   *  -  ``-=``
      -  Elimination of a ccell or ccells - candidate(s) from a cell eg. ``r7c2-=24``

Conditionals
------------

.. list-table::
   :widths: 20 80
   :align: left
   :width: 98%

   *  -  ``==``
      -  Presence of only value or candidates in cells  eg. ``23==r2c57``
   *  -  ``~=``
      -  Presence of only 2 or more of specified candidates in each specified cell in a cell grouping,
         such that union of candidates in specified cells match specified candidates. eg.  ``347~=r2c456``,
         or ``347~=r2Ib2`` - ``r2Ib2`` are the three cells lying in the intersection of ``r2Ib2``,
   *  -  ``--``
      -  Presence of at least the specified candidate(s) in cells eg. ``34—r2c8``.  This relationship is also
         specified by ``34r2c8``, a shorthand where the “--” is implied.
   *  -  ``~-``
      -  Presence of at least one one instance of each specified candidate, amongst other candidates in a cell
         grouping.  ``34~-r3Ib3``
   *  -  ``!-``
      -  Absence of candidate(s) in cells, eg. ``34!-r2c235``

Relational Specifiers
---------------------

.. list-table::
   :widths: 20 80
   :align: left
   :width: 98%

   *  -  ``#``
      -  Count, eg. ``17#2r3`` candidates 1 and 7 occur twice in row 3
   *  -  ``U``
      -  House unions, eg. ``r5Ub6`` – the 15 cells in union of row 5 and box 6
   *  -  ``I``
      -  House intersections, eg. ``r5Ib6`` the 3 cell in the intersection of row 5 and box 6
   *  -  ``=``
      -  Strong Link between two ccells. If X is True then Y is False and if X is False then Y is True
   *  -  ``-``
      -  Weak Link between two ccells. If X is True then Y is False and if X is False then Y is Unknown
   *  -  ``|-|``
      -  Weak Chain – Chain creates a Weak Link between its ends
   *  -  ``|=|``
      -  Strong Chain – Chain creates a Strong Link between its ends
   *  -  ``|~|``
      -  Robust Chain – Chain creates a link that behaves opposite to a weak link. If X is True, Y is Unknown
         and if X is False then Y is True
   *  -  ``( ... )``
      -  Parenthesis – Associative contraction: ``5r3c2=3r3c2 <=> (5=3)r3c2``.

This is an arrow :raw-html:`&rarr;` just for luck.
{ ... , ... , ...}	Braces – Groupings of sub-patterns in Nets, etc.
[ ... ]	Square Brackets – To group sub-structures in larger structures
< ... >	Pointy Brackets – Contain relationships between grouped sub-structures
2.1.2.6.   Candidate Dressing
+	Candidate is placed (as opposed to being a given) in a puzzle.
/	Restricted Candidate, eg. 3/456r3Ub2
\	Unrestricted Candidate, eg 34\56c7Ub4

2.1.3.   Sudoku Language Semantics
This section only describes how to read and interpret the Sudoku Language Syntax, not what the patterns mean and how they are resolved.  That is left to the balance of this chapter and the Chapter on Human Solvable Sudoku Patterns.

Note:
    1. Candidate values always precede operators and / or cell specifiers when describing or specifying a pattern.
    2. Candidate values always follow an operator in when cell(s) are being modified (either adding or eliminating a candidate or assigning a value.
    3. A Ccell that is part of a structure such as a Chain or Net is always referred to as a Node to distinguish it from other Ccells that are not part of the structure.

2.1.3.1.   Singles
Exposed Singles
3==r7c1	3 is the only candidate in r7c1 and can be placed.

Hidden Singles
3#1b7,b7p3	3 occurs once in box 7, position 3,.

Locked Singles
7r9c12,!-r9		Pointing locked single, 7 occurs in r9, cells r9c1, and r9c2, and nowhere else in row 9 (!-r9), that is outside of tower 1.
4r45c2,!-b4	Claiming locked single, 4 occurs column 2 cells  r4c2 and r5c2, and no where else in box 4,

Empty Rectangles
7#4b4,r4,c3;7r4c4=7r7c4
7 occurs 4 times in box describing r4 and c3 and 7r4c4 is strongly linked to 7r7c4.

2.1.3.2.   (Straight) Subsets
Exposed Pair

Exposed Locked Pair

Hidden Pair

Exposed Triple

Exposed Locked Triple

Hidden Triple

Exposed Quad

Hidden Quad

2.1.3.3.   Fish




Exposed Pair
2.1.3.4.   Locked Singles

2.1.3.5.   Empty Rectangle





2.1.3.6.   Straight Subsets
Exposed Subsets:
345==r5c268	345 are the only candidates in the combination of cells r5c2, r5c6, r5c8 in row 5.
Hidden Subsets
34!-r2c!235	Candidates 34 are not present in r2 outside of r2c2, r2c3, r2c5.  That is 34 is only present in r2c235
2.1.3.7.   Fish
Base Set Lines precede Cover Set Lines.
9c234r135,r7c3	Candidate 9 with bases in columns 2, 3 and 4, covers in rows 1, 3, and 5 with a fin in r7c3.

2.1.3.8.   Chains, Loops and Nets
Follows AIC notation
4r2c7=5r2c7-5r2c2=4r2c2-4r3c1=5r3c1-5r6c1=4r6c1  (prefer expanded)
(4=5)r2c7-(5=4)r2c2-(4=5)r3c1-(5=4)r6c1

Loops
Note last appended link indicating last ccell linked to first ccell.
4r2c7=5r2c7-5r2c2=4r2c2-4r3c1=5r3c1-5r2c1=2r2c7~  (prefer expanded)

Single digit chains
4(r2c7=r2c2-r3c1=r6c1)
4r2c7=4r2c2-4r3c1=4r6c1  (preferred expanded)

Bi-Value Cell Nets – Remote Pairs
(2=8)(r8c4~r5c4{~r5c9~r4c7~r4c6, ~r7c4~r2c4~r2c8})
(1=8)(r1c1{~r1c7~r2c9{~r2c5,~r4c9~r4c6~r5c6},~r3c3})  (prefer compacted, expanded (not shown) is too verbose)
Note the use of braces to group all the Children of a Node.

Bi-Value (XY-) Chains and Loops
(2=3)r2c6-(3=5)r7c6~(5=9)r7c5~(9=2)r5c5  (prefer compacted, expanded is too verbose)

Strong Linked Nets
1r1c1n=1r1c4p=1r6c4n={1r6c7p=1r4c7n=1r4c5p=1r2c5n=1r2c1p,9r6c4p}
Note:

    1. All the links are Strong
    2. Braces are used to group all the Children of a Node.
    3. Ccells are postfixed with a polarity symbol, “n” or “p”.  All nodes in a Strong net have polarity. Polarity indicates a possible Truth.  Either the one polarity or the other polarity is the Truth, however which it is, is unknown.

2.1.3.9.   Bent Subsets
Exposed Bent Subsets
34\56r7Ub9	Candidates 3456 form a Bent Exposed Quad in r7 and b9 where 5 has been identified as the unrestricted candidate.

Grouped Bent Subsets
345(r3Ib3,==r3c14,!-b3p!15)  Candidate 345 lie in the intersection of row 3 and box 3 (r3c789) where the exposed subset is in the rows, r3c14, and the hidden subset is in the box, where 345 is not present in positions 1, 5 in box 3. - that is only present in b3p15, or r1c7 and r2c8.
2.1.3.10.   Unlocked Sets
Z(ALS1)X1(ALS2)X2(ALS3)Z
1(127r1c3,89r2c3,279r3c3,189r5c3)27(278r1c1)8(78r1c9,79r3c9,16r4c9,69r6c9)1

2(26r7c2,246r9c1)4(46r2c4,24r9c4)4(46r2c1,26r3c2)2–
Note:

    1. The candidates Z and X can be individual or sets of.
    2. The dash on the end of the last example indicates that this is an ULS-loop where the end candidate can directly see the starting candidate.

2.1.3.11.   Complex Patterns
Chained Strong Linked Nets.
[1r1c1n=1r1c4p=1r6c4n={1r6c7p=1r4c7n=1r4c5p=1r2c5n=1r2c1p,9r6c4p}]
<1r1c4p-5r1c4n>
[4r5c4n={4r9c4p={4r9c5n=7r9c5p,5r9c4n={5r1c4p,5r8c6p}},9r5c4p}],
4r9c5-4r2c5-1r2c5
Note:

    1. Each Strong Linked Net is braced with Square brackets
    2. The phrase describing the relationship between the two chains is braced with Pointy brackets <1r1c4p-5r1c5n>


2.2.   Concept Diagrams
The concept diagrams in this documentation vary somewhat from those described in Sudopedia and https://forum.enjoysudoku.com.  Note that a cell can only contain a Solved Value or two or more Candidates, In Concept Diagrams, W, X, Y, and Z refer to unique but unspecified candidate values.

    • X	X is the only value in that cell and is the Solved Value
    • X+	X must be a present candidate, with optionally other candidates
    • XY	XY must be the only two candidate values in that cell.
    • XY+	XY must be present, optionally other candidates
    • XYZ	At least two of X, Y, and Z must be the only values present
    • XYZ+	At least two of X, Y,  and Z must be present, optionally other candidates.
    • XYZ	X and Y  must be present, optionally Z only
    • XYZ	X, Y, and Z must be the only candidates present.
    • XYZ+	X, Y and Z must be present with or without other candidates.
    • WXYZ	At least two of W, X, Y, and Z must be the only values present
    • WXYZ+	At least two of W, X, Y, and Z must be present optionally other candidates.
    • WXYZ	W and X must be present, optionally Y and Z only.
    • WXYZ	All of W, X, Y and Z must be the only values present.
    • WXYZ+	All of W, X, Y, and Z must be present, optionally other candidates
    • X	Not X, X must be absent, optionally other candidates present.

The “∪” union symbol prefixing any of the above specifications represents the union of that candidate specification s in a linebox line intersection.
    • ∪XYZ+	The linebox intersection union must contain at least X, Y and Z.

Candidate eliminations:
    • *		Any candidate indicated in the pattern can be eliminated.
    • X*	Any candidate except X can be eliminated.
    • X	X can be eliminated if present.
    • XYZ*	X and Y must be present, optionally Z present and any other candidate can be eliminated.

Some Examples:

Locked Exposed Pair
The exposed pair XY is confined to the intersection of r1 and b1.  * indicates all the cells that can see the cells of the exposed pair.  If X or Y exists in those cells with a \*, it can be eliminated.



Y-Wing
The pattern XYr3c2, YZr3c6 and XZr8c2 identifying that Z will be True in either or both pincers.  Therefore, any cell that sees both pincers can eliminate Z











Locked Pointing Single.
X is present in the intersection of r1 and b1 with other candidates, and is not present in any of the other cells in b1.  As X is constrained to the intersection, X cannot be true anywhere else in r1, and if present in any of the cells indicated by the * it can be eliminated.

XYZ-Wing










Locked Exposed Triple










2.3.