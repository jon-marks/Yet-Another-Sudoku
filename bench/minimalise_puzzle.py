#!/usr/bin/env python

import os, shutil, sys
from timeit import timeit

if not os.getenv("PYCHARM_HOSTED"):
    cwd = os.getcwd()
    sys.path.insert(0, os.path.join(cwd, "src"))
    sys.path.insert(0, os.path.join(cwd, "lib"))

from misc import grid_str_to_grid
import generate as gen
import generate_x as genx



NTESTS = 10
Ntimeits = 1
Cols = 2

sG = ".5267.3.8.3...562767..325.128...61.5.6....2.4714523869827314956.9.267483346958712"

# Python times for deques
# 110secs
# [(2, 6), (8, 7), (8, 4), (2, 0), (3, 8), (3, 5), (3, 6), (5, 7), (6, 2), (5, 5), (7, 8), (4, 6), (4, 8), (5, 2), (8, 3), (0, 6), (6, 5), (5, 1), (2, 4), (5, 4), (8, 6), (7, 6), (6, 1), (0, 4), (1, 8), (7, 5), (1, 7), (1, 6), (6, 4), (7, 3), (8, 2), (8, 8), (2, 1), (3, 1), (4, 1), (7, 4), (1, 1), (5, 3), (6, 7), (6, 3), (5, 8), (8, 1), (2, 8), (0, 1), (0, 3), (6, 8), (8, 0), (1, 5), (0, 2), (6, 6), (3, 0), (5, 0), (8, 5), (6, 0), (2, 5), (7, 7), (5, 6), (7, 1), (0, 8)]
# 73 secs
# [(0, 6), (7, 5), (5, 8), (1, 1), (6, 4), (8, 0), (0, 4), (1, 7), (6, 2), (8, 4), (5, 2), (5, 7), (1, 5), (2, 8), (2, 0), (6, 7), (8, 6), (5, 4), (7, 3), (4, 6), (6, 8), (5, 0), (5, 3), (0, 2), (2, 4), (8, 7), (8, 5), (7, 4), (6, 1), (5, 6), (3, 6), (2, 5), (8, 2), (1, 8), (8, 8), (2, 1), (0, 1), (0, 8), (5, 1), (4, 8), (3, 5), (8, 3), (8, 1), (6, 6), (6, 3), (7, 8), (7, 1), (3, 1), (6, 5), (4, 1), (5, 5), (7, 7), (2, 6), (1, 6), (3, 0), (6, 0), (0, 3), (7, 6), (3, 8)]
# 48 secs
# [(2, 0), (3, 0), (8, 0), (1, 8), (0, 4), (4, 8), (8, 8), (1, 6), (8, 7), (0, 8), (8, 4), (2, 4), (5, 3), (6, 3), (5, 4), (1, 5), (5, 5), (0, 2), (7, 3), (7, 6), (7, 8), (2, 6), (4, 6), (4, 1), (5, 7), (3, 1), (6, 7), (5, 1), (0, 6), (8, 3), (3, 5), (2, 8), (8, 5), (0, 3), (6, 1), (7, 5), (3, 8), (0, 1), (2, 5), (6, 5), (6, 0), (2, 1), (6, 8), (8, 2), (7, 4), (7, 7), (3, 6), (8, 1), (8, 6), (5, 8), (5, 2), (7, 1), (6, 6), (5, 0), (6, 2), (1, 7), (5, 6), (6, 4), (1, 1)]
# 24 secs
# [(2, 1), (5, 8), (5, 4), (6, 2), (7, 3), (6, 8), (7, 6), (0, 8), (1, 5), (8, 0), (8, 5), (8, 7), (4, 6), (5, 2), (5, 3), (8, 8), (0, 1), (0, 2), (6, 7), (6, 4), (2, 5), (2, 6), (8, 1), (7, 5), (3, 6), (6, 1), (1, 8), (7, 4), (2, 0), (0, 4), (3, 0), (8, 6), (3, 8), (0, 6), (6, 6), (7, 8), (1, 7), (6, 0), (8, 3), (6, 5), (1, 1), (7, 1), (3, 1), (1, 6), (8, 2), (2, 4), (6, 3), (4, 1), (5, 5), (3, 5), (5, 0), (5, 6), (5, 7), (2, 8), (0, 3), (5, 1), (7, 7), (4, 8), (8, 4)]
# 15 secs
# [(5, 8), (0, 2), (2, 1), (7, 3), (6, 0), (3, 1), (8, 6), (4, 1), (4, 6), (6, 4), (4, 8), (5, 5), (7, 7), (2, 8), (6, 2), (2, 5), (3, 6), (6, 8), (3, 8), (3, 5), (6, 7), (3, 0), (8, 1), (6, 5), (1, 8), (5, 7), (1, 6), (6, 6), (6, 3), (8, 3), (7, 8), (7, 1), (2, 0), (0, 3), (5, 0), (8, 8), (5, 2), (8, 7), (7, 6), (2, 4), (8, 0), (1, 7), (1, 1), (2, 6), (7, 4), (0, 8), (1, 5), (8, 2), (8, 5), (8, 4), (5, 1), (0, 4), (5, 3), (7, 5), (5, 6), (5, 4), (0, 1), (0, 6), (6, 1)]
# 9.8 secs
# [(5, 2), (8, 0), (6, 8), (3, 0), (2, 6), (8, 3), (5, 1), (0, 6), (5, 8), (2, 4), (0, 1), (7, 4), (1, 8), (3, 5), (0, 8), (5, 7), (7, 7), (2, 0), (2, 5), (5, 3), (8, 1), (7, 3), (2, 8), (6, 2), (6, 0), (4, 6), (8, 2), (5, 0), (7, 5), (7, 1), (8, 4), (7, 6), (3, 1), (6, 3), (3, 8), (8, 7), (8, 6), (1, 5), (5, 6), (8, 8), (2, 1), (4, 1), (6, 7), (6, 1), (8, 5), (3, 6), (6, 6), (1, 6), (6, 5), (6, 4), (0, 3), (0, 2), (1, 7), (7, 8), (5, 5), (1, 1), (0, 4), (5, 4), (4, 8)]
# 7 secs
# [(3, 5), (5, 4), (5, 5), (5, 1), (2, 5), (8, 7), (7, 7), (8, 3), (8, 8), (3, 6), (8, 1), (7, 6), (8, 2), (5, 6), (1, 1), (5, 8), (6, 1), (2, 1), (4, 1), (8, 0), (2, 8), (6, 7), (5, 3), (0, 2), (1, 5), (5, 7), (2, 6), (0, 4), (8, 4), (0, 6), (6, 2), (5, 0), (6, 8), (7, 8), (7, 5), (1, 8), (7, 4), (6, 4), (0, 3), (6, 5), (7, 1), (0, 8), (8, 6), (7, 3), (3, 8), (3, 0), (1, 7), (1, 6), (0, 1), (3, 1), (6, 3), (4, 8), (2, 4), (2, 0), (6, 0), (8, 5), (4, 6), (5, 2), (6, 6)]
# 5 secs
# [(0, 6), (7, 5), (8, 8), (8, 6), (1, 6), (6, 2), (2, 4), (4, 8), (2, 8), (2, 0), (7, 6), (5, 4), (6, 4), (8, 1), (5, 5), (7, 1), (5, 0), (5, 7), (5, 8), (0, 1), (0, 3), (6, 1), (3, 5), (7, 4), (8, 3), (3, 1), (5, 1), (8, 5), (7, 8), (8, 2), (6, 0), (1, 7), (1, 1), (0, 4), (5, 2), (8, 4), (1, 8), (4, 6), (2, 5), (7, 7), (3, 0), (0, 2), (2, 6), (2, 1), (3, 8), (6, 6), (6, 3), (8, 7), (1, 5), (6, 5), (3, 6), (0, 8), (4, 1), (8, 0), (7, 3), (6, 7), (6, 8), (5, 6), (5, 3)]
# 2.5 secs
# [(8, 7), (6, 4), (5, 0), (3, 0), (7, 6), (5, 7), (0, 6), (6, 2), (2, 6), (7, 8), (0, 1), (3, 5), (1, 1), (8, 4), (6, 1), (3, 1), (2, 8), (6, 5), (7, 7), (5, 4), (8, 5), (8, 6), (6, 0), (4, 6), (5, 5), (8, 3), (0, 8), (0, 3), (7, 5), (1, 5), (0, 2), (6, 3), (0, 4), (7, 3), (6, 8), (2, 1), (2, 5), (6, 6), (5, 6), (8, 2), (8, 8), (4, 1), (8, 0), (2, 0), (2, 4), (1, 6), (3, 6), (5, 8), (8, 1), (7, 4), (5, 3), (1, 7), (5, 2), (7, 1), (6, 7), (5, 1), (3, 8), (1, 8), (4, 8)]
# 2.3 secs
# [(3, 0), (8, 5), (7, 6), (6, 2), (4, 8), (0, 4), (6, 7), (2, 6), (6, 6), (0, 3), (8, 6), (6, 8), (5, 8), (0, 1), (5, 7), (5, 2), (8, 8), (7, 1), (6, 3), (8, 3), (6, 0), (7, 7), (5, 1), (7, 5), (5, 6), (8, 0), (5, 0), (8, 1), (0, 6), (5, 3), (2, 1), (1, 8), (3, 5), (1, 1), (0, 8), (8, 2), (3, 6), (6, 1), (6, 5), (3, 1), (7, 8), (3, 8), (4, 6), (2, 4), (8, 7), (1, 6), (2, 8), (7, 4), (4, 1), (5, 5), (1, 5), (5, 4), (2, 0), (1, 7), (8, 4), (2, 5), (6, 4), (0, 2), (7, 3)]

G = [[0 for c in range(9)] for r in range(9)]
# T_H's suffix is the avg time to mimimalise this puzzle digging the remaining holes sorted as folls.'
# T_H1_3 = [(8, 7), (6, 4), (5, 0), (3, 0), (7, 6), (5, 7), (0, 6), (6, 2), (2, 6), (7, 8), (0, 1), (3, 5), (1, 1), (8, 4), (6, 1), (3, 1), (2, 8), (6, 5), (7, 7), (5, 4), (8, 5), (8, 6), (6, 0), (4, 6), (5, 5), (8, 3), (0, 8), (0, 3), (7, 5), (1, 5), (0, 2), (6, 3), (0, 4), (7, 3), (6, 8), (2, 1), (2, 5), (6, 6), (5, 6), (8, 2), (8, 8), (4, 1), (8, 0), (2, 0), (2, 4), (1, 6), (3, 6), (5, 8), (8, 1), (7, 4), (5, 3), (1, 7), (5, 2), (7, 1), (6, 7), (5, 1), (3, 8), (1, 8), (4, 8)]
# T_H5 = [(0, 6), (7, 5), (8, 8), (8, 6), (1, 6), (6, 2), (2, 4), (4, 8), (2, 8), (2, 0), (7, 6), (5, 4), (6, 4), (8, 1), (5, 5), (7, 1), (5, 0), (5, 7), (5, 8), (0, 1), (0, 3), (6, 1), (3, 5), (7, 4), (8, 3), (3, 1), (5, 1), (8, 5), (7, 8), (8, 2), (6, 0), (1, 7), (1, 1), (0, 4), (5, 2), (8, 4), (1, 8), (4, 6), (2, 5), (7, 7), (3, 0), (0, 2), (2, 6), (2, 1), (3, 8), (6, 6), (6, 3), (8, 7), (1, 5), (6, 5), (3, 6), (0, 8), (4, 1), (8, 0), (7, 3), (6, 7), (6, 8), (5, 6), (5, 3)]
# T_H7_4 = [(5, 2), (8, 0), (6, 8), (3, 0), (2, 6), (8, 3), (5, 1), (0, 6), (5, 8), (2, 4), (0, 1), (7, 4), (1, 8), (3, 5), (0, 8), (5, 7), (7, 7), (2, 0), (2, 5), (5, 3), (8, 1), (7, 3), (2, 8), (6, 2), (6, 0), (4, 6), (8, 2), (5, 0), (7, 5), (7, 1), (8, 4), (7, 6), (3, 1), (6, 3), (3, 8), (8, 7), (8, 6), (1, 5), (5, 6), (8, 8), (2, 1), (4, 1), (6, 7), (6, 1), (8, 5), (3, 6), (6, 6), (1, 6), (6, 5), (6, 4), (0, 3), (0, 2), (1, 7), (7, 8), (5, 5), (1, 1), (0, 4), (5, 4), (4, 8)]
# T_H26 = [(2, 1), (5, 8), (5, 4), (6, 2), (7, 3), (6, 8), (7, 6), (0, 8), (1, 5), (8, 0), (8, 5), (8, 7), (4, 6), (5, 2), (5, 3), (8, 8), (0, 1), (0, 2), (6, 7), (6, 4), (2, 5), (2, 6), (8, 1), (7, 5), (3, 6), (6, 1), (1, 8), (7, 4), (2, 0), (0, 4), (3, 0), (8, 6), (3, 8), (0, 6), (6, 6), (7, 8), (1, 7), (6, 0), (8, 3), (6, 5), (1, 1), (7, 1), (3, 1), (1, 6), (8, 2), (2, 4), (6, 3), (4, 1), (5, 5), (3, 5), (5, 0), (5, 6), (5, 7), (2, 8), (0, 3), (5, 1), (7, 7), (4, 8), (8, 4)]
# T_H110 = [(2, 6), (8, 7), (8, 4), (2, 0), (3, 8), (3, 5), (3, 6), (5, 7), (6, 2), (5, 5), (7, 8), (4, 6), (4, 8), (5, 2), (8, 3), (0, 6), (6, 5), (5, 1), (2, 4), (5, 4), (8, 6), (7, 6), (6, 1), (0, 4), (1, 8), (7, 5), (1, 7), (1, 6), (6, 4), (7, 3), (8, 2), (8, 8), (2, 1), (3, 1), (4, 1), (7, 4), (1, 1), (5, 3), (6, 7), (6, 3), (5, 8), (8, 1), (2, 8), (0, 1), (0, 3), (6, 8), (8, 0), (1, 5), (0, 2), (6, 6), (3, 0), (5, 0), (8, 5), (6, 0), (2, 5), (7, 7), (5, 6), (7, 1), (0, 8)]
T_H = [(0, 6), (7, 5), (8, 8), (8, 6), (1, 6), (6, 2), (2, 4), (4, 8), (2, 8), (2, 0), (7, 6), (5, 4), (6, 4), (8, 1), (5, 5), (7, 1), (5, 0), (5, 7), (5, 8), (0, 1), (0, 3), (6, 1), (3, 5), (7, 4), (8, 3), (3, 1), (5, 1), (8, 5), (7, 8), (8, 2), (6, 0), (1, 7), (1, 1), (0, 4), (5, 2), (8, 4), (1, 8), (4, 6), (2, 5), (7, 7), (3, 0), (0, 2), (2, 6), (2, 1), (3, 8), (6, 6), (6, 3), (8, 7), (1, 5), (6, 5), (3, 6), (0, 8), (4, 1), (8, 0), (7, 3), (6, 7), (6, 8), (5, 6), (5, 3)]


b = [[0.0 for j in range(Cols)] for i in range(NTESTS)]
Min = [0.0] * Cols
Avg = [0.0] * Cols
print("Col 1: minimalise_puzzle() from generate.py - interpreted")
print("Col 2: minimalise_puzzle() from generate_x.pyx - compiled")
print(f"timeit()'s number: {Ntimeits}")
print("Runs, Col 1,      Col 2")
for i in range(NTESTS):
    grid_str_to_grid(sG, G)
    b[i][0] = timeit(lambda: gen.minimalise_puzzle(G, T_H), number = Ntimeits)
    grid_str_to_grid(sG, G)
    b[i][1] = timeit(lambda: genx.minimalise_puzzle(G, T_H), number = Ntimeits)
    print(f"{i+1: 4d}, {b[i][0]:9.7f}, {b[i][1]:9.7f}")
for j in range(Cols):
    A = 0.0
    M = 999999.0
    for i in range(NTESTS):
        A += b[i][j]
        M = min(M, b[i][j])
    Avg[j] = A/NTESTS
    Min[j] = M

print(f" Avg, {Avg[0]:9.7f}, {Avg[1]:9.7f}")
print(f" Min, {Min[0]:9.7f}, {Min[1]:9.7f}")
print(f" Imp,            {(Min[0]/Min[1]): 8.2f}x")
